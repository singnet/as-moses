#include <cxxtest/TestSuite.h>
#include <opencog/moses/main/populate_atomspace.h>
#include <opencog/data/table/table.h>
#include <opencog/data/table/table_io.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/value/Value.h>
#include <opencog/utils/valueUtils.h>

using namespace opencog;
using namespace moses;
using namespace combo;
using namespace std;

const string populateAtomSpaceUTest_dir = string(PROJECT_SOURCE_DIR) + "/tests/moses/main/";

class populateAtomSpaceUTest : public CxxTest::TestSuite {
public:
	string f1;
	string f2;
	ValuePtr feature1;
	ValuePtr feature2;
	ValueSeq values_vec1;
	ValueSeq values_vec2;

	void test_contin_type() {
		AtomSpace as;
		//create  a table of inputs
		ITable it(vector<type_node>(2, id::contin_type));
		it.push_back({0.4, 244.2});
		it.push_back({9.5, 4.2});
		populate(&as, it);

		//Get the labels of the Table
		f1 = it.get_labels().at(0);
		f2 = it.get_labels().at(1);

		//Get the value from Atomspace
		feature1 = as.get_handle(SCHEMA_NODE, f1)->getValue(value_key);
		feature2 = as.get_handle(SCHEMA_NODE, f2)->getValue(value_key);

		//Get the value
		vector<double> results1 = FloatValueCast(feature1)->value();
		vector<double> results2 = FloatValueCast(feature2)->value();

		vector<double> expected1 = {0.4, 9.5};
		vector<double> expected2 = {244.2, 4.2};

		TS_ASSERT_EQUALS(expected1, results1);
		TS_ASSERT_EQUALS(expected2, results2);
	}

	void test_boolean_type() {
		AtomSpace as;
		//create a table of inputs
		vector<string> labels{"f1", "f2"};
		ITable it(vector<type_node>(2, id::boolean_type), labels);
		it.push_back({id::logical_true, id::logical_false});
		it.push_back({id::logical_false, id::logical_true});
		populate(&as, it);

		//Get the labels of the Table
		f1 = it.get_labels().at(0);
		f2 = it.get_labels().at(1);

		//get the inputs from AtomSpace
		feature1 = as.get_handle(PREDICATE_NODE, f1)->getValue(value_key);
		feature2 = as.get_handle(PREDICATE_NODE, f2)->getValue(value_key);

		//Get the values
		values_vec1 = LinkValueCast(feature1)->value();
		values_vec2 = LinkValueCast(feature2)->value();

		vector<bool> results1 = {};
		vector<bool> results2 = {};

		//Convert linkvalue to equivalent bool
		for (ValuePtr pr:values_vec1) results1.push_back(bool_value_to_bool(pr));
		for (ValuePtr pr:values_vec2) results2.push_back(bool_value_to_bool(pr));

		vector<bool> expected1 = {true, false};
		vector<bool> expected2 = {false, true};

		TS_ASSERT_EQUALS(results1, expected1);
		TS_ASSERT_EQUALS(results2, expected2);
	}

	void test_populate_compressed() {
		AtomSpace as;
		string input_file = populateAtomSpaceUTest_dir + "dataset.ctable";
		CTable ct = loadCTable(input_file);

		populate(&as, ct);

		//Get the labels of the Table
		const string_seq labels = ct.get_input_labels();
		f1 = labels[0];
		f2 = labels[1];

		//get the inputs from AtomSpace
		feature1 = as.get_handle(PREDICATE_NODE, f1)->getValue(moses::compressed_value_key);
		feature2 = as.get_handle(PREDICATE_NODE, f2)->getValue(moses::compressed_value_key);

		//Get the values
		values_vec1 = LinkValueCast(feature1)->value();
		values_vec2 = LinkValueCast(feature2)->value();

		vector<bool> feature1_results = {};
		vector<bool> feature2_results = {};

		//Convert linkvalue to equivalent bool
		for (ValuePtr pr:values_vec1) {
			feature1_results.push_back(bool_value_to_bool(pr));
		}
		for (ValuePtr pr:values_vec2) {
			feature2_results.push_back(bool_value_to_bool(pr));
		}

		vector<bool> expected_feature1 = {true, false};
		vector<bool> expected_feature2 = {false, true};

		TS_ASSERT_EQUALS(feature1_results, expected_feature1);
		TS_ASSERT_EQUALS(feature2_results, expected_feature2);
	}
};
